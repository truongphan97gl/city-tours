{"version":3,"sources":["logo.svg","components/Navbar/Navbar.js","components/Tour/tour.js","tourData.js","components/TourList/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","src","logo","alt","href","Tour","state","showInfo","handleShowInfo","setState","this","tour","id","city","img","name","info","handleRemove","onClick","Component","tourData","TourList","tours","removeTour","filteredTours","filter","map","key","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,4OC6B5BC,MAzBf,SAAgBC,GACd,OACE,yBAAKC,UAAU,UACb,yBAAKC,IAAKC,IAAMC,IAAI,KACpB,wBAAIH,UAAU,aACZ,4BACE,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,SAIF,4BACE,uBAAGI,KAAK,IAAIJ,UAAU,YAAtB,UAIF,4BACE,uBAAGI,KAAK,IAAIJ,UAAU,mBAAtB,Y,mCCmBKK,G,iNApCdC,MAAQ,CACPC,UAAU,G,EAEXC,eAAiB,WAChB,EAAKC,SAAS,CACbF,UAAW,EAAKD,MAAMC,Y,wEAGd,IAAD,EAC0BG,KAAKX,MAAMY,KAAtCC,EADC,EACDA,GAAIC,EADH,EACGA,KAAMC,EADT,EACSA,IAAIC,EADb,EACaA,KAAKC,EADlB,EACkBA,KACnBC,EAAgBP,KAAKX,MAArBkB,aAEP,OACC,6BAASjB,UAAU,QAClB,yBAAKA,UAAU,iBACd,yBAAKC,IAAKa,EAAKX,IAAI,cACnB,0BAAMH,UAAU,YAAYkB,QAAS,kBAAMD,EAAaL,KACvD,uBAAGZ,UAAU,0BAGf,yBAAKA,UAAU,aACd,4BAAKa,GACL,4BAAKE,GACL,mCACM,IACL,0BAAMG,QAASR,KAAKF,gBACnB,uBAAGR,UAAU,+BAGdU,KAAKJ,MAAMC,UAAYS,Q,GA9BVG,cCFNC,EAAW,CACtB,CACER,GAAI,EACJC,KAAM,WACNC,IAAK,qBACLC,KAAM,uBACNC,KACE,kJAEJ,CACEJ,GAAI,EACJC,KAAM,QACNC,IAAK,mBACLC,KAAM,oBACNC,KACE,kJAEJ,CACEJ,GAAI,EACJC,KAAM,SACNC,IAAK,oBACLC,KAAM,2BACNC,KACE,kJAEJ,CACEJ,GAAI,EACJC,KAAM,QACNC,IAAK,mBACLC,KAAM,mBACNC,KACE,mJCFSK,G,iNAvBbf,MAAQ,CACNgB,MAAOF,G,EAERG,WAAa,SAACX,GACb,IAAMY,EAAgB,EAAKlB,MAAMgB,MAAMG,QAAO,SAAAd,GAAI,OAAIA,EAAKC,KAAOA,KAClE,EAAKH,SAAS,CACZa,MAAOE,K,wEAGD,IAAD,OACCF,EAAUZ,KAAKJ,MAAfgB,MAER,OACE,6BAAStB,UAAU,aAChBsB,EAAMI,KAAI,SAAAf,GAAI,OACb,kBAAC,EAAD,CAAMM,aAAc,EAAKM,WAAYI,IAAKhB,EAAKC,GAAID,KAAMA,Y,GAhB5CQ,c,MCWRS,MATf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4800d3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.12a6659f.svg\";","import React from \"react\";\nimport logo from \"../../logo.svg\";\nimport \"./navbar.scss\"\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar\">\n      <img src={logo} alt=\"\" />\n      <ul className=\"nav-links\">\n        <li>\n          <a href=\"#\" className=\"nav-link\">\n            home\n          </a>\n        </li>\n        <li>\n          <a href=\"#\" className=\"nav-link\">\n            about\n          </a>\n        </li>\n        <li>\n          <a href=\"#\" className=\"nav-link active\">\n            tour\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React, {Component} from 'react';\nimport './tour.scss'\nclass Tour extends Component {\n\tstate = {\n\t\tshowInfo: false\n\t}\n\thandleShowInfo = () => {\n\t\tthis.setState({\n\t\t\tshowInfo: !this.state.showInfo\n\t\t})\n\t}\n\trender() {\n\t\tconst {id, city, img,name,info} = this.props.tour;\n\t\tconst {handleRemove} = this.props;\n\n\t\treturn (\n\t\t\t<article className=\"tour\">\n\t\t\t\t<div className=\"img-container\">\n\t\t\t\t\t<img src={img} alt=\"city tour\"/>\n\t\t\t\t\t<span className=\"close-btn\" onClick={() => handleRemove(id)}>\n\t\t\t\t\t\t<i className=\"fas fa-window-close\"/>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"tour-info\">\n\t\t\t\t\t<h3>{city}</h3>\n\t\t\t\t\t<h4>{name}</h4>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\tinfo{\" \"}\n\t\t\t\t\t\t<span onClick={this.handleShowInfo}>\n\t\t\t\t\t\t\t<i className=\"fas fa-caret-square-down\"/>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</h5>\n\t\t\t\t\t{this.state.showInfo && info}\n\t\t\t\t</div>\n\t\t\t</article>\n\t\t);\n\t}\n}\n\nexport default Tour;","export const tourData = [\n  {\n    id: 1,\n    city: \"new york\",\n    img: \"./img/newyork.jpeg\",\n    name: \"new york bridge tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n  {\n    id: 2,\n    city: \"paris\",\n    img: \"./img/paris.jpeg\",\n    name: \"paris lights tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n  {\n    id: 3,\n    city: \"london\",\n    img: \"./img/london.jpeg\",\n    name: \"london royal palace tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  },\n  {\n    id: 4,\n    city: \"tokyo\",\n    img: \"./img/tokyo.jpeg\",\n    name: \"tokyo sushi tour\",\n    info:\n      \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Tenetur, nam omnis error corrupti eum assumenda enim odit architecto corporis. Sequi\"\n  }\n];\n","import React, { Component } from \"react\";\nimport Tour from \"../Tour\";\nimport {tourData} from \"../../tourData\";\nimport \"./tourlist.scss\";\n\nclass TourList extends Component {\n  state = {\n    tours: tourData\n  };\n   removeTour = (id)  => {\n    const filteredTours = this.state.tours.filter(tour => tour.id !== id);\n    this.setState({\n      tours: filteredTours\n    })\n  };\n  render() {\n    const { tours } = this.state;\n\n    return (\n      <section className=\"tour-list\">\n        {tours.map(tour => (\n          <Tour handleRemove={this.removeTour} key={tour.id} tour={tour}>\n          </Tour>\n        ))}\n      </section>\n    );\n  }\n}\n\nexport default TourList;\n","import React from 'react';\nimport './App.scss';\nimport Navbar from './components/Navbar/Navbar'\nimport TourList from './components/TourList'\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar/>\n      <TourList/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}